{"version":3,"sources":["components/Table/Table.jsx","components/Login/Login.jsx","components/Navbar/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Table","data","React","useMemo","col1","col2","columns","Header","accessor","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","Login","props","className","loginStatus","errors","Button","onClick","fetch","method","then","results","json","setLoggedIn","alt","src","width","height","Navbar","useState","currentTime","setCurrentTime","res","test","App","Fragment","exact","path","login","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3dc714d3.chunk.js","sourcesContent":["import React from 'react';\nimport { useTable } from 'react-table';\nimport './Table.css';\n\nexport default function Table() {\n  const data = React.useMemo(\n    () => [\n      {\n        col1: 'Hello',\n        col2: 'World',\n      },\n      {\n        col1: 'react-table',\n        col2: 'rocks',\n      },\n      {\n        col1: 'whatever',\n        col2: 'you want',\n      },\n    ],\n    []\n  )\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: 'col1', // accessor is the \"key\" in the data\n      },\n      {\n        Header: 'Column 2',\n        accessor: 'col2',\n      },\n    ],\n    []\n  )\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({ columns, data })\n\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th\n                {...column.getHeaderProps()}\n              >\n                {column.render('Header')}\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map(row => {\n          prepareRow(row)\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return (\n                  <td\n                    {...cell.getCellProps()}\n                  >\n                    {cell.render('Cell')}\n                  </td>\n                )\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n","import React from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport Table from '../Table/Table';\nimport { \n  Button\n} from 'reactstrap';\nimport Errors from '../Errors/Errors';\n\n\nexport default function Login(props) {\n\n  let token, errors = null;\n\n  function oauthLogin() {\n    fetch('/login', {\n      method: 'GET',\n    })\n    .then(results => results.json())\n    .then(props.setLoggedIn);\n  }\n\n  // TODO: add test for error code handler\n  // errors = {\n  //   code: 400,\n  //   message: \"Unable to get access token.\"\n  // }\n\n  return(\n    <div className=\"App\">\n      {props.loginStatus === false && (\n        <div className=\"login-container\">\n          <h1>Slow<span>Draft</span></h1>\n          <p>Fantasy hockey drafting at your own pace</p>\n          <p>Currently by invitation only</p>\n            { errors != null && (\n              <Errors\n                code={errors.code}\n                message={errors.message}\n              />\n            )}\n            <div className=\"connect-to-yahoo\">\n              <Button \n                className=\"connect-button\" \n                onClick={oauthLogin()}\n              >\n                Sign in with &nbsp;\n                <img alt=\"Yahoo\" src=\"yahoo.png\" width=\"57\" height=\"16\" />\n              </Button>\n            </div>\n          </div>\t\n      )}\n\n      {props.loginStatus === true && (\n\n        <Tabs className=\"navbar-tabs\">\n          <TabList>\n              <Tab>1</Tab>\n              <Tab>2</Tab>\n              <Tab>3</Tab>\n          </TabList>\n          <TabPanel>\n            <h2>tab 1 content</h2>\n            <Table />\n          </TabPanel>\n          <TabPanel>\n            <h2>tab 2 content</h2>\n          </TabPanel>\n          <TabPanel>\n            <h2>tab 3 content</h2>\n          </TabPanel>\n        </Tabs>\n\n      )}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\n// import 'react-tabs/style/react-tabs.css';\n\nexport default function Navbar() {\n  const [currentTime, setCurrentTime] = useState();\n  function update() {\n    fetch('/test').then(res => res.json()).then(data => {\n      setCurrentTime(data.test);\n    });\n  }\n\n  // useEffect example\n  // useEffect(() => {\n  //   fetch('/test').then(res => res.json()).then(data => {\n  //     setCurrentTime(data.test);\n  //   });\n  // }, [update]);\n\n  return (\n    <Tabs className=\"navbar-tabs\">\n      <TabList>\n        <Tab>1</Tab>\n        <Tab>2</Tab>\n        <Tab>3</Tab>\n      </TabList>\n      <TabPanel>\n        <h2>tab 1 content</h2>\n        <button onClick={update}>test</button>\n        Test: {currentTime}\n      </TabPanel>\n      <TabPanel>\n        <h2>tab 2 content</h2>\n      </TabPanel>\n      <TabPanel>\n        <h2>tab 3 content</h2>\n      </TabPanel>\n    </Tabs>\n  );\n}\n\n","import React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Login from './components/Login/Login';\nimport Navbar from './components/Navbar/Navbar';\nimport Table from './components/Table/Table';\nimport './App.css';\nimport 'react-tabs/style/react-tabs.css';\nimport { getCookie, setCookie } from './assets/Cookies';\n\nexport default function App() {\n  // const user = getCookie(\"user\") === null ? setCookie(\"user\") : getCookie(\"user\");\n  // const [popoverOpen, setPopoverOpen] = useState(false);\n  // const toggle = () => setPopoverOpen(!popoverOpen);\n  const [loginStatus, setLoggedIn] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Login \n              loginStatus={loginStatus}\n              login={setLoggedIn}\n            />\n          </Route>\n          <Route exact path=\"/navbar\">\n            <Navbar />\n            <Table />\n          </Route>\n        </Switch>\n      </Router>\n    </React.Fragment>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}