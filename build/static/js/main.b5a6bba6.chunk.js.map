{"version":3,"sources":["components/Navbar/Navbar.jsx","components/Table/Table.jsx","components/Login/Login.jsx","hoc/Aux.js","App.js","assets/Cookies.jsx","serviceWorker.js","index.js"],"names":["Navbar","useState","currentTime","setCurrentTime","defaultIndex","className","onClick","fetch","then","res","json","data","test","Table","React","useMemo","col1","col2","columns","Header","accessor","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","Login","props","login","setLoggedIn","code","console","log","oauthData","method","results","loggedIn","errors","href","alt","src","width","height","aux","children","App","queryParams","qs","parse","window","location","search","cookieName","name","ca","decodeURIComponent","document","cookie","split","i","length","c","charAt","substring","indexOf","getCookie","Aux","Boolean","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oWAKe,SAASA,IAAU,IAAD,EACOC,qBADP,mBACxBC,EADwB,KACXC,EADW,KAe/B,OACE,kBAAC,IAAD,CAAMC,aAAa,IAAIC,UAAU,eAC/B,kBAAC,IAAD,KACE,kBAAC,IAAD,UACA,kBAAC,IAAD,UACA,kBAAC,IAAD,WAEF,kBAAC,IAAD,KACE,6CACA,4BAAQC,QAtBd,WACEC,MAAM,SAASC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GAC1CR,EAAeQ,EAAKC,WAoBlB,QAFF,SAGSV,GAET,kBAAC,IAAD,KACE,8CAEF,kBAAC,IAAD,KACE,+C,iBChCO,SAASW,IACtB,IAAMF,EAAOG,IAAMC,SACjB,iBAAM,CACJ,CACEC,KAAM,QACNC,KAAM,SAER,CACED,KAAM,cACNC,KAAM,SAER,CACED,KAAM,WACNC,KAAM,eAGV,IAGIC,EAAUJ,IAAMC,SACpB,iBAAM,CACJ,CACEI,OAAQ,WACRC,SAAU,QAEZ,CACED,OAAQ,WACRC,SAAU,WAGd,IA9B4B,EAsC1BC,mBAAS,CAAEH,UAASP,SALtBW,EAjC4B,EAiC5BA,cACAC,EAlC4B,EAkC5BA,kBACAC,EAnC4B,EAmC5BA,aACAC,EApC4B,EAoC5BA,KACAC,EArC4B,EAqC5BA,WAGF,OACE,0BAAWJ,IACT,+BACGE,EAAaG,KAAI,SAAAC,GAAW,OAC3B,uBAAQA,EAAYC,sBACjBD,EAAYE,QAAQH,KAAI,SAAAI,GAAM,OAC7B,uBACMA,EAAOC,iBAEVD,EAAOE,OAAO,mBAMzB,0BAAWV,IACRE,EAAKE,KAAI,SAAAO,GAER,OADAR,EAAWQ,GAET,uBAAQA,EAAIC,cACTD,EAAIE,MAAMT,KAAI,SAAAU,GACb,OACE,uBACMA,EAAKC,eAERD,EAAKJ,OAAO,kB,YC/DlB,SAASM,EAAMC,GAC5B,IAEIC,EAAQD,EAAME,YAyBlB,OAXIF,EAAMG,OACRC,QAAQC,IAAI,eAAiBL,EAAMG,MAV/BH,EAAMM,WACRvC,MAAM,SAAWiC,EAAMG,KAAM,CAC3BI,OAAQ,QAETvC,MAAK,SAAAwC,GAAO,OAAIA,EAAQtC,UACxBF,KAAKiC,IAgBR,yBAAKpC,UAAU,QACO,IAAnBmC,EAAMS,UACL,yBAAK5C,UAAU,mBACb,mCAAQ,wCACR,uEACA,4DACI6C,EAMF,yBAAK7C,UAAU,oBACb,uBAAG8C,KAtCK,mPAsCR,oBAEE,yBAAKC,IAAI,QAAQC,IAAI,YAAYC,MAAM,KAAKC,OAAO,WAMzC,IAAnBf,EAAMS,UAEL,kBAAC,IAAD,CAAM5C,UAAU,eACd,kBAAC,IAAD,KACI,kBAAC,IAAD,UACA,kBAAC,IAAD,UACA,kBAAC,IAAD,WAEJ,kBAAC,IAAD,KACE,6CACA,kBAAC,EAAD,OAEF,kBAAC,IAAD,KACE,8CAEF,kBAAC,IAAD,KACE,gD,oBCtEGmD,G,MAFH,SAAChB,GAAD,OAAWA,EAAMiB,WCQd,SAASC,IAAO,IAAD,EACIzD,oBAAS,GADb,mBACrBgD,EADqB,KACXP,EADW,KAGtBiB,EAAcC,IAAGC,MAAMC,OAAOC,SAASC,QAoBvCrB,ECxBiB,SAACsB,GAIxB,IAHA,IAAIC,EAAOD,EAAa,IAElBE,EADgBC,mBAAmBC,SAASC,QACzBC,MAAM,KACvBC,EAAI,EAAGA,EAAGL,EAAGM,OAAQD,IAAK,CAEhC,IADA,IAAIE,EAAIP,EAAGK,GACY,MAAhBE,EAAEC,OAAO,IACdD,EAAIA,EAAEE,UAAU,GAElB,GAAwB,IAApBF,EAAEG,QAAQX,GACZ,OAAOQ,EAAEE,UAAUV,EAAKO,OAAQC,EAAED,QAGtC,MAAO,GDWMK,CAAU,iBAAmBnB,EAAW,KAErD,OACE,kBAACoB,EAAD,MACK9B,GACD,kBAAC,EAAD,CACEA,SAAUA,EACVR,MAAOC,EACPC,KAAMA,IAIRM,GACA,kBAAC,EAAD,OEhCY+B,QACW,cAA7BlB,OAAOC,SAASkB,UAEe,UAA7BnB,OAAOC,SAASkB,UAEhBnB,OAAOC,SAASkB,SAASC,MACvB,2DCZNC,IAASlD,OACP,kBAAC,IAAMmD,WAAP,KACE,kBAAC,EAAD,OAEFf,SAASgB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhF,MAAK,SAAAiF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.b5a6bba6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport './Navbar.css';\n// import 'react-tabs/style/react-tabs.css';\n\nexport default function Navbar() {\n  const [currentTime, setCurrentTime] = useState();\n  function update() {\n    fetch('/test').then(res => res.json()).then(data => {\n      setCurrentTime(data.test);\n    });\n  }\n\n  // useEffect example\n  // useEffect(() => {\n  //   fetch('/test').then(res => res.json()).then(data => {\n  //     setCurrentTime(data.test);\n  //   });\n  // }, [update]);\n\n  return (\n    <Tabs defaultIndex=\"0\" className=\"navbar-tabs\">\n      <TabList>\n        <Tab>1</Tab>\n        <Tab>2</Tab>\n        <Tab>3</Tab>\n      </TabList>\n      <TabPanel>\n        <h2>tab 1 content</h2>\n        <button onClick={update}>test</button>\n        Test: {currentTime}\n      </TabPanel>\n      <TabPanel>\n        <h2>tab 2 content</h2>\n      </TabPanel>\n      <TabPanel>\n        <h2>tab 3 content</h2>\n      </TabPanel>\n    </Tabs>\n  );\n}\n\n","import React from 'react';\nimport { useTable } from 'react-table';\nimport './Table.css';\n\nexport default function Table() {\n  const data = React.useMemo(\n    () => [\n      {\n        col1: 'Hello',\n        col2: 'World',\n      },\n      {\n        col1: 'react-table',\n        col2: 'rocks',\n      },\n      {\n        col1: 'whatever',\n        col2: 'you want',\n      },\n    ],\n    []\n  )\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: 'col1', // accessor is the \"key\" in the data\n      },\n      {\n        Header: 'Column 2',\n        accessor: 'col2',\n      },\n    ],\n    []\n  )\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({ columns, data })\n\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th\n                {...column.getHeaderProps()}\n              >\n                {column.render('Header')}\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map(row => {\n          prepareRow(row)\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return (\n                  <td\n                    {...cell.getCellProps()}\n                  >\n                    {cell.render('Cell')}\n                  </td>\n                )\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n","import React from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport Table from '../Table/Table';\nimport Errors from '../Errors/Errors';\nimport './Login.css';\n\nexport default function Login(props) {\n  const client_id = \"dj0yJmk9ZnBhT05mU3JBYnJDJmQ9WVdrOWJrWjBXRlpSYlVNbWNHbzlNQT09JnM9Y29uc3VtZXJzZWNyZXQmc3Y9MCZ4PTAz\"\n  let errors = null;\n  let login = props.setLoggedIn;\n  let yahooLoginUrl = \"https://api.login.yahoo.com/oauth2/request_auth?client_id=\" + client_id + \n      \"&redirect_uri=https://slowdraft.herokuapp.com/login&response_type=code&language=en-us\"\n\n  const oauthLogin = () => {\n    if (props.oauthData) {\n      fetch('/login' + props.code, {\n        method: 'GET',\n      })\n      .then(results => results.json())\n      .then(login)\n    }\n  }\n\n  if (props.code) {\n    console.log(\"props.code: \" + props.code);\n    oauthLogin();\n  }\n\n  // TODO: add test for error code handler\n  // errors = {\n  //   code: 400,\n  //   message: \"Unable to get access token.\"\n  // }\n\n  return (\n    <div className=\"App\">\n      {props.loggedIn === false && (\n        <div className=\"login-container\">\n          <h1>Slow<span>Draft</span></h1>\n          <p>Fantasy hockey drafting at your own pace</p>\n          <p>Currently by invitation only</p>\n            { errors != null && (\n              <Errors\n                code={errors.code}\n                message={errors.message}\n              />\n            )}\n            <div className=\"connect-to-yahoo\">\n              <a href={yahooLoginUrl}>\n                Sign in with &nbsp;\n                <img alt=\"Yahoo\" src=\"yahoo.png\" width=\"57\" height=\"16\" />\n              </a>\n            </div>\n          </div>\t\n      )}\n\n      {props.loggedIn === true && (\n\n        <Tabs className=\"navbar-tabs\">\n          <TabList>\n              <Tab>1</Tab>\n              <Tab>2</Tab>\n              <Tab>3</Tab>\n          </TabList>\n          <TabPanel>\n            <h2>tab 1 content</h2>\n            <Table />\n          </TabPanel>\n          <TabPanel>\n            <h2>tab 2 content</h2>\n          </TabPanel>\n          <TabPanel>\n            <h2>tab 3 content</h2>\n          </TabPanel>\n        </Tabs>\n\n      )}\n    </div>\n  );\n}\n","const aux = (props) => props.children;\n\nexport default aux;\n","import React, { useState } from 'react';\nimport Navbar from './components/Navbar/Navbar';\nimport Login from './components/Login/Login';\nimport qs from 'query-string';\nimport './App.css';\nimport Aux from './hoc/Aux';\nimport { getCookie } from './assets/Cookies';\n\nexport default function App() {\n  const [loggedIn, setLoggedIn] = useState(false);\n  // const [oauthData, setOauthData] = useState(null);\n  const queryParams = qs.parse(window.location.search);\n\n  // function getOauthData() {\n  //   fetch('/oauth_data', {\n  //     method: 'GET',\n  //   })\n  //   .then(response => {\n  //     console.log(\"response: \" + JSON.stringify(response, null, 4))\n  //     return response.json()\n  //   })\n  //   .then(response => {\n  //     setOauthData(response)\n  //     console.log(\"response 2: \" + JSON.stringify(response, null, 4))\n  //     return\n  //   })\n  //   .then(log => {\n  //     console.log(\"oauthData: \" + oauthData);\n  //   })\n  // }\n\n  const code = getCookie('access_token') || queryParams[\"code\"];\n\n  return (\n    <Aux>\n      { !loggedIn && (\n        <Login \n          loggedIn={loggedIn}\n          login={setLoggedIn}\n          code={code}\n        />\n      )}\n\n      { loggedIn && (\n        <Navbar />\n      )}\n    </Aux>\n  );\n}\n","\nexport const setCookie = (string, value) => {\n  const expiry = new Date(); \n  expiry.setDate(expiry.getDate() + 90)\n  document.cookie = string + \"=\" + value + \"; expires=\" + expiry\n}\n\nexport const getCookie = (cookieName) => {\n  let name = cookieName + \"=\";\n  const decodedCookie = decodeURIComponent(document.cookie);\n  const ca = decodedCookie.split(';');\n  for(let i = 0; i <ca.length; i++) {\n    let c = ca[i];\n    while (c.charAt(0) === ' ') {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) === 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}