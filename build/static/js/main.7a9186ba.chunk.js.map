{"version":3,"sources":["components/Table/Table.jsx","assets/Cookies.jsx","components/Login/Login.jsx","hoc/Aux.js","components/AppWrapper/Navbar/Navbar.jsx","components/AppWrapper/AppWrapper.jsx","App.js","serviceWorker.js","index.js"],"names":["Table","data","React","useMemo","player","stat","columns","Header","accessor","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","setCookie","string","value","expiry","Date","setDate","getDate","document","cookie","Login","code","fetch","method","then","results","json","console","log","access_token","refresh_token","window","history","replaceState","title","className","errors","href","alt","src","width","height","aux","props","children","Navbar","useState","currentTime","setCurrentTime","Aux","defaultIndex","onClick","res","test","AppWrapper","setLoggedIn","Fragment","App","qs","parse","location","search","yahooSession","useEffect","cookieName","Boolean","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7a9186ba.chunk.js","sourcesContent":["import React from 'react';\nimport { useTable } from 'react-table';\nimport './Table.css';\n\nexport default function Table() {\n  const data = React.useMemo(\n    () => [\n      {\n        player: 'Crosby',\n        stat: '10',\n      },\n      {\n        player: 'Ovechkin',\n        stat: '7',\n      },\n      {\n        player: 'Kane',\n        stat: '4',\n      },\n    ],\n    []\n  )\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Players',\n        accessor: 'player', // accessor is the \"key\" in the data\n      },\n      {\n        Header: 'Stats',\n        accessor: 'stat',\n      },\n    ],\n    []\n  )\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({ columns, data })\n\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th\n                {...column.getHeaderProps()}\n              >\n                {column.render('Header')}\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map(row => {\n          prepareRow(row)\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return (\n                  <td\n                    {...cell.getCellProps()}\n                  >\n                    {cell.render('Cell')}\n                  </td>\n                )\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n","\nexport const setCookie = (string, value) => {\n  const expiry = new Date(); \n  expiry.setDate(expiry.getDate() + 90)\n  document.cookie = string + \"=\" + value + \"; expires=\" + expiry + \"; SameSite=Lax;\"\n}\n\nexport const getCookie = (cookieName) => {\n  let name = cookieName + \"=\";\n  const decodedCookie = decodeURIComponent(document.cookie);\n  const ca = decodedCookie.split(';');\n  for(let i = 0; i <ca.length; i++) {\n    let c = ca[i];\n    while (c.charAt(0) === ' ') {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) === 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n}\n\nexport const deleteCookie = (cookieName) => {\n  document.cookie = cookieName + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n}\n","import React from 'react';\nimport Table from '../Table/Table';\nimport Errors from '../Errors/Errors';\nimport './Login.css';\nimport { setCookie } from '../../assets/Cookies';\nimport 'axios';\n\nexport default function Login({ code }) {\n  const client_id = \"dj0yJmk9ZnBhT05mU3JBYnJDJmQ9WVdrOWJrWjBXRlpSYlVNbWNHbzlNQT09JnM9Y29uc3VtZXJzZWNyZXQmc3Y9MCZ4PTAz\"\n  let errors = null;\n  let yahooLoginUrl = \"https://api.login.yahoo.com/oauth2/request_auth?client_id=\" + client_id + \n      \"&redirect_uri=https://slowdraft.herokuapp.com&response_type=code&language=en-us\"\n      // \"&redirect_uri=oob&response_type=code&language=en-us\" // for local testing\n\n  function oauthLogin() {\n    fetch(`/login/${code}`, {\n      method: 'GET',\n    })\n    .then(results => results.json())\n    .then(data => {\n      console.log(data);\n      setCookie('access_token', data.access_token);\n      setCookie('refresh_token', data.refresh_token);\n      window.history.replaceState({}, document.title, \"/\");\n    });\n  }\n\n  if (code) {\n    oauthLogin();\n  }\n\n  // TODO: add test for error code handler\n  // errors = {\n  //   code: 400,\n  //   message: \"Unable to get access token.\"\n  // }\n\n  return (\n    <div className=\"App\">\n      <div className=\"login-container\">\n        <h1>Slow<span>Draft</span></h1>\n        <p>Fantasy hockey drafting at your own pace</p>\n        <p>Currently by invitation only</p>\n          { errors != null && (\n            <Errors\n              code={errors.code}\n              message={errors.message}\n            />\n          )}\n        <div className=\"connect-to-yahoo\">\n          <a href={yahooLoginUrl}>\n            Sign in with &nbsp;\n            <img alt=\"Yahoo\" src=\"yahoo.png\" width=\"57\" height=\"16\" />\n          </a>\n        </div>\n      </div>\t\n    </div>\n  );\n}\n","const aux = (props) => props.children;\n\nexport default aux;\n","import React, { useState } from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport './Navbar.css';\nimport Aux from '../../../hoc/Aux';\nimport Table from '../../Table/Table';\n\nexport default function Navbar() {\n  const [currentTime, setCurrentTime] = useState();\n  function update() {\n    fetch('/test').then(res => res.json()).then(data => {\n      setCurrentTime(data.test);\n    });\n  }\n  // useEffect example\n  // useEffect(() => {\n  //   fetch('/test').then(res => res.json()).then(data => {\n  //     setCurrentTime(data.test);\n  //   });\n  // }, [update]);\n\n  return (\n    <Aux>\n      <Tabs defaultIndex={0} className=\"navbar-tabs\">\n        <TabList>\n          <Tab>1</Tab>\n          <Tab>2</Tab>\n          <Tab>3</Tab>\n        </TabList>\n        <TabPanel>\n          <h2>tab 1 content</h2>\n          <button onClick={update}>test</button>\n          Test: {currentTime}\n        </TabPanel>\n        <TabPanel>\n          <h2>tab 2 content</h2>\n          <Table />\n        </TabPanel>\n        <TabPanel>\n          <h2>tab 3 content</h2>\n        </TabPanel>\n      </Tabs>\n    </Aux>\n  );\n}\n\n","import React from 'react';\nimport Navbar from './Navbar/Navbar';\n\nexport default function AppWrapper({setLoggedIn}) {\n  return (\n    <React.Fragment>\n      <Navbar />\n\n    </React.Fragment>\n\n  );\n}\n","import React, { useEffect } from 'react';\nimport Login from './components/Login/Login';\nimport qs from 'query-string';\nimport './App.css';\nimport Aux from './hoc/Aux';\nimport { getCookie, deleteCookie } from './assets/Cookies';\nimport AppWrapper from './components/AppWrapper/AppWrapper';\n\nexport default function App() {\n  // const [loggedIn, setLoggedIn] = useState(false);\n  const queryParams = qs.parse(window.location.search);\n  const code = queryParams[\"code\"];\n  let yahooSession = true;\n  // let yahooSession = getCookie('access_token') ? true : false;\n  console.log(\"yahooSession: \" + yahooSession);\n\n  useEffect(() => {\n    if (yahooSession) {\n      window.history.replaceState({}, document.title, \"/\");\n    } \n  }, [yahooSession]);\n  \n  function logout() { \n    deleteCookie(\"access_token\");\n    yahooSession = false;\n  }\n\n  console.log(\"yahoo: \" + yahooSession);\n  return (\n    <Aux>\n      { !yahooSession && (\n        <Login \n          code={code}\n          />\n        )}\n\n      { yahooSession && (\n        <React.Fragment>\n          <AppWrapper\n          />\n          <button onClick={logout}>Logout</button>\n        </React.Fragment>\n      )}\n    </Aux>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}