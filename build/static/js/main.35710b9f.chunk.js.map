{"version":3,"sources":["components/Login/Login.jsx","hoc/Aux.js","components/Table/Table.jsx","components/AppWrapper/Navbar/Navbar.jsx","useInput.js","components/AppWrapper/AppWrapper.jsx","App.js","serviceWorker.js","index.js"],"names":["Login","code","login","fetch","method","then","results","json","data","access_token","refresh_token","window","history","replaceState","document","title","className","errors","href","alt","src","width","height","aux","props","children","Table","React","useMemo","player","stat","columns","Header","accessor","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","Navbar","useState","currentTime","setCurrentTime","Aux","defaultIndex","onClick","res","test","useInput","value","setValue","onChange","event","target","AppWrapper","logout","pub","sub","messages","setMessages","tempChannel","tempMessage","defaultChannel","channel","setChannel","Date","getTime","join","username","params","location","search","substring","split","i","length","pair","decodeURI","goBack","query","Log","id","item","index","key","uuid","text","useEffect","addEventListener","removeEventListener","console","log","pubnub","PubNub","publishKey","subscribeKey","addListener","status","statusEvent","category","message","msg","newMessages","push","concat","subscribe","channels","count","stringifiedTimeToken","response","entry","unsubscribeAll","Fragment","class","placeholder","onKeyDown","messageObject","publish","publishMessage","newChannel","trim","newURL","origin","pushState","autoFocus","App","loggedIn","setLoggedIn","setPub","setSub","qs","parse","success","Boolean","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.35710b9f.chunk.js","sourcesContent":["import React from 'react';\nimport Errors from '../Errors/Errors';\nimport './Login.css';\n\nexport default function Login({ code, login }) {\n  const client_id = \"dj0yJmk9ZnBhT05mU3JBYnJDJmQ9WVdrOWJrWjBXRlpSYlVNbWNHbzlNQT09JnM9Y29uc3VtZXJzZWNyZXQmc3Y9MCZ4PTAz\"\n  let errors = null;\n  let yahooLoginUrl = \"https://api.login.yahoo.com/oauth2/request_auth?client_id=\" + client_id + \n      \"&redirect_uri=https://slowdraft.herokuapp.com&response_type=code&language=en-us\"\n      // \"&redirect_uri=oob&response_type=code&language=en-us\" // for testing login locally\n\n  function oauthLogin() {\n    fetch(`/login/${code}`, {\n      method: 'GET',\n    })\n    .then(results => results.json())\n    .then(data => {\n      if (data.access_token && data.refresh_token) {\n        window.history.replaceState({}, document.title, \"/\");\n        login(true);\n      } else {\n        login(false);\n      }\n    })\n  }\n\n  if (code) {\n    oauthLogin();\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"login-container\">\n        <h1>Slow<span>Draft</span></h1>\n        <p>Fantasy hockey drafting at your own pace</p>\n        <p>Currently by invitation only</p>\n          { errors != null && (\n            <Errors\n              code={errors.code}\n              message={errors.message}\n            />\n          )}\n        <div className=\"connect-to-yahoo\">\n          <a href={yahooLoginUrl}>\n            Sign in with &nbsp;\n            <img alt=\"Yahoo\" src=\"yahoo.png\" width=\"57\" height=\"16\" />\n          </a>\n        </div>\n      </div>\t\n    </div>\n  );\n}\n","const aux = (props) => props.children;\n\nexport default aux;\n","import React from 'react';\nimport { useTable } from 'react-table';\nimport './Table.css';\n\nexport default function Table() {\n  const data = React.useMemo(\n    () => [\n      {\n        player: 'Crosby',\n        stat: '10',\n      },\n      {\n        player: 'Ovechkin',\n        stat: '7',\n      },\n      {\n        player: 'Kane',\n        stat: '4',\n      },\n    ],\n    []\n  )\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Players',\n        accessor: 'player', // accessor is the \"key\" in the data\n      },\n      {\n        Header: 'Stats',\n        accessor: 'stat',\n      },\n    ],\n    []\n  )\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({ columns, data })\n\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th\n                {...column.getHeaderProps()}\n              >\n                {column.render('Header')}\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map(row => {\n          prepareRow(row)\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return (\n                  <td\n                    {...cell.getCellProps()}\n                  >\n                    {cell.render('Cell')}\n                  </td>\n                )\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n","import React, { useState } from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport './Navbar.css';\nimport Aux from '../../../hoc/Aux';\nimport Table from '../../Table/Table';\n\nexport default function Navbar() {\n  const [currentTime, setCurrentTime] = useState();\n  function update() {\n    fetch('/test').then(res => res.json()).then(data => {\n      setCurrentTime(data.test);\n    });\n  }\n  // useEffect example\n  // useEffect(() => {\n  //   fetch('/test').then(res => res.json()).then(data => {\n  //     setCurrentTime(data.test);\n  //   });\n  // }, [update]);\n\n  return (\n    <Aux>\n      <Tabs defaultIndex={0} className=\"navbar-tabs\">\n        <TabList>\n          <Tab>1</Tab>\n          <Tab>2</Tab>\n          <Tab>3</Tab>\n        </TabList>\n        <TabPanel>\n          <h2>tab 1 content</h2>\n          <button onClick={update}>test</button>\n          Test: {currentTime}\n        </TabPanel>\n        <TabPanel>\n          <h2>tab 2 content</h2>\n          <Table />\n        </TabPanel>\n        <TabPanel>\n          <h2>tab 3 content</h2>\n        </TabPanel>\n      </Tabs>\n    </Aux>\n  );\n}\n\n","import { useState } from 'react';\n\nfunction useInput()\n{\n  let [value, setValue] = useState('');\n  let onChange = function(event){\n    setValue(event.target.value);\n  };\n  return {\n    value,\n    setValue,\n    onChange\n  };\n}\n\nexport default useInput;\n","import React, { useState, useEffect } from 'react';\nimport Navbar from './Navbar/Navbar';\nimport useInput from '../../useInput.js';\nimport PubNub from 'pubnub'; // backend for chat component\n\nexport default function AppWrapper({logout, pub, sub}) {\n  const [messages,setMessages] = useState([]);\n  // Messages, a message adding buffer, channel, username, and\n  // temp channel and message using the useInput hook. You can access what the\n  // user is currently typing with those hooks.\n  const tempChannel = useInput();\n  const tempMessage = useInput();\n  let defaultChannel = \"Global\";\n  const [channel,setChannel] = useState(defaultChannel);\n  const [username,] = useState(['user', new Date().getTime()].join('-'));\n\n    //Set a default channel incase someone navigates to the base url without\n  //specificfying a channel name parameter.\n\n  //Access the parameters provided in the URL\n  let query = window.location.search.substring(1);\n  let params = query.split(\"&\");\n  for(let i = 0; i < params.length;i++){\n    var pair = params[i].split(\"=\");\n    //If the user input a channel then the default channel is now set\n    //If not, we still navigate to the default channel.\n    if(pair[0] === \"channel\" && pair[1] !== \"\"){\n      defaultChannel = decodeURI(pair[1]);\n    }\n  }\n\n  // Adds back browser button listener\n  useEffect(() => {\n    window.addEventListener(\"popstate\",goBack);\n\n    return function cleanup(){\n      window.removeEventListener(\"popstate\",goBack);\n    }\n  },[]);\n\n  // Set up PubNub to handle events that come through. Reruns on channel name update!\n  useEffect(()=>{\n    console.log(\"setting up chat\");\n    const pubnub = new PubNub({\n      publishKey: pub,\n      subscribeKey: sub,\n      uuid: username\n    });\n\n    pubnub.addListener({\n      status: function(statusEvent) {\n        if (statusEvent.category === \"PNConnectedCategory\") {\n          console.log(\"Connected to chat!\")\n        }\n      },\n      message: function(msg) {\n        if(msg.message.text){\n          console.log(msg.message.text)\n          let newMessages = [];\n          newMessages.push({\n            uuid:msg.message.uuid,\n            text: msg.message.text\n          });\n          setMessages(messages=>messages.concat(newMessages))\n        }\n      }\n    });\n\n    // Subscribes to the channel in our state\n    pubnub.subscribe({\n      channels: [channel]\n    });\n\n    pubnub.history(\n    {\n        channel: channel,\n        count: 10, // 100 is the default\n        stringifiedTimeToken: true // false is the default\n    }, function (status, response){\n      let newMessages = [];\n        for (let i  = 0; i < response.messages.length;i++){\n          newMessages.push({\n            uuid:response.messages[i].entry.uuid ,\n            text: response.messages[i].entry.text\n          });\n        }\n        setMessages(messages=>messages.concat(newMessages));\n      }\n    );\n    return function cleanup(){\n      console.log(\"closing chat\");\n      pubnub.unsubscribeAll();\n      setMessages([]);\n    }\n  },[channel, username, pub, sub]);\n\n  function handleKeyDown(event){\n    if(event.target.id === \"messageInput\"){\n      if (event.key === 'Enter') {\n        publishMessage();\n      }\n    }else if(event.target.id === \"channelInput\"){\n      if (event.key === 'Enter') {\n        // Navigates to new channels\n        const newChannel = tempChannel.value.trim();\n        if(newChannel){\n          if(channel !== newChannel){\n            // If the user isnt trying to navigate to the same channel theyre on\n            setChannel(newChannel);\n            let newURL = window.location.origin + \"?channel=\" + newChannel;\n            window.history.pushState(null, '',newURL);\n            tempChannel.setValue('');\n          }\n        }else{\n          // If the user didnt put anything into the channel Input\n          if(channel !== \"Global\"){\n            //If the user isnt trying to navigate to the same channel they are on\n            setChannel(\"Global\");\n            let newURL = window.location.origin;\n            window.history.pushState(null, '',newURL);\n            tempChannel.setValue('');\n          }\n        }\n      }\n    }\n  }\n\n  // Publishing messages via PubNub\n  function publishMessage(){\n    if (tempMessage.value) {\n      let messageObject = {\n        text: tempMessage.value,\n        uuid: username\n      };\n  \n      const pubnub = new PubNub({\n          publishKey: pub,\n          subscribeKey: sub,\n          uuid: username\n        });\n      pubnub.publish({\n        message: messageObject,\n        channel: channel\n      });\n      tempMessage.setValue('');\n    }\n  }\n\n  function goBack() {\n    //Access the parameters provided in the URL\n    let query = window.location.search.substring(1);\n    if(!query){\n      setChannel(\"Global\")\n    }else{\n      let params = query.split(\"&\");\n      for(let i = 0; i < params.length;i++){\n        var pair = params[i].split(\"=\");\n        //If the user input a channel then the default channel is now set\n        //If not, we still navigate to the default channel.\n        if(pair[0] === \"channel\" && pair[1] !== \"\"){\n            setChannel(decodeURI(pair[1]))\n        }\n      }\n    }\n  }\n\n\n  //Log functional component that is the list of messages\n  function Log(props) {\n    return(\n      <ul id=\"chat-messages\">\n        <li>\n          <div>\n            { props.messages.map((item, index)=>(\n              <div key={index}>\n                <span className=\"user\">{item.uuid}: </span>\n                <span className=\"message\">{item.text}</span>\n              </div>\n            )) }\n          </div>\n        </li>\n      </ul>\n    )\n  };\n\n  return (\n    <React.Fragment>\n      <Navbar />\n      <button class=\"button\" id=\"logout\" onClick={logout}>Logout</button>\n      <div id=\"chatbox\">\n        <Log messages={messages}/>\n        <input\n          placeholder=\"Enter a message\"\n          id=\"messageInput\"\n          value={tempMessage.value}\n          onChange={tempMessage.onChange}\n          onKeyDown={handleKeyDown}\n          autoFocus={true}\n        />\n      </div>\n    </React.Fragment>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport Login from './components/Login/Login';\nimport qs from 'query-string';\nimport Aux from './hoc/Aux';\nimport AppWrapper from './components/AppWrapper/AppWrapper';\nimport './App.css';\n\nexport default function App() {\n\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [pub, setPub] = useState(\"\");\n  const [sub, setSub] = useState(\"\");\n  const queryParams = qs.parse(window.location.search);\n  const code = queryParams[\"code\"];\n\n  // const publishKey = (pub) => {\n  //   setPub(pub);\n  // };\n  // const subscribeKey = (sub) => {\n  //   setSub(sub);\n  // };\n\n  useEffect(() => {\n    fetch('/check_login').then(res => res.json()).then(data => {\n      if (data.success === true) {\n        setPub(data.pub);\n        setSub(data.sub);\n        window.history.replaceState({}, document.title, \"/\");\n        setLoggedIn(true);\n      } else {\n        setLoggedIn(false);\n      }\n    });\n  }, []);\n  \n  function logout() {\n    fetch('/logout').then(res => res.json()).then(data => {\n      console.log(data.success);\n      setLoggedIn(false);\n    });\n  }\n\n  return (\n    <Aux>\n      { !loggedIn && (\n        <Login \n          code={code}\n          login={setLoggedIn}\n          />\n        )}\n\n      { (loggedIn && pub !== \"\") && (\n        <AppWrapper\n          logout={logout}\n          pub={pub}\n          sub={sub}\n        />\n      )}\n    </Aux>\n  );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}